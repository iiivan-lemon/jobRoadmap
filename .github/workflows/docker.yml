name: deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create env file
        run: touch .env;
          echo DBHOST=${{ secrets.VPS_SSH_HOST }} >> .env;
          echo DBPORT=${{ secrets.VPS_SSH_PORT }} >> .env;
          echo DBUSER=${{ secrets.VPS_SSH_USERNAME }} >> .env;
          echo DBPASSWORD=${{ secrets.VPS_SSH_SECRET }} >> .env;
          cat .env;
          chmod 666 .env;
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: sample:dev
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create env file
        run: touch .env;
          echo DBHOST=${{ secrets.VPS_SSH_HOST }} >> .env;
          echo DBPORT=${{ secrets.VPS_SSH_PORT }} >> .env;
          echo DBUSER=${{ secrets.VPS_SSH_USERNAME }} >> .env;
          echo DBPASSWORD=${{ secrets.VPS_SSH_SECRET }} >> .env;
          cat .env;
          chmod 666 .env;
      - name: Pull docker images
        run : |
          sudo docker build -t sample:dev .  pull
      - name: Run docker-compose
        run : |
          docker restart $(docker ps -a -q --filter ancestor=sample:dev --format="{{.ID}}")
      - name: Clear old images and containers
        run : |
          sudo docker container prune
          sudo docker image prune
