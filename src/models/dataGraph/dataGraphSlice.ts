import {
  createAsyncThunk, createSlice
  // , type PayloadAction
} from '@reduxjs/toolkit'
// import { type RootState, type AppThunk } from '../../app/store'

import { fetchDataGraph } from './dataGraphService'
import { type RootState } from '../../app/store'

export interface DataGraphState {
  name: string
  distance: number
  professionalism: number
}

const initialState: DataGraphState[] = []

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
function checkStatus (status: number): string {
  switch (Math.round(status / 100)) {
    case 1: {
      return 'Information'
    }
    case 2: {
      return 'Success'
    }
    case 3: {
      return 'Redirect'
    }
    case 4: {
      return 'Client Error'
    }
    case 5: {
      return 'Server Error'
    }
    default: {
      return ''
    }
  }
}
export const getDataGraph = createAsyncThunk(
  'dataGraph/fetchDataGraph',
  async (input: string) => {
    const response = await fetchDataGraph(input)
    checkStatus(response.status)
    // The value we return becomes the `fulfilled` action payload
    return response.data.technologies
  }
)

export const dataGraphSlice = createSlice({
  name: 'dataGraph',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.push({
        name: '',
        distance: 0,
        professionalism: 0
      })
    },
    decrement: (state) => {
      state[0].name += 'test2'
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDataGraph.pending, (state) => {
        console.log('loading')
      })
      .addCase(getDataGraph.fulfilled, (state, action) => {
        state.length = 0
        state.push(...action.payload)
      })
      .addCase(getDataGraph.rejected, (state) => {
        console.log('failed')
      })
  }
})

// export const { incrementByAmount } = dataGraphSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDataGraph = (state: RootState): DataGraphState[] => state.dataGraph
//
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//       (dispatch, getState) => {
//         const currentValue = selectCount(getState())
//         if (currentValue % 2 === 1) {
//           dispatch(incrementByAmount(amount))
//         }
//       }

export default dataGraphSlice.reducer
