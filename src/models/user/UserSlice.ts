import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
// import { type RootState, type AppThunk } from '../../app/store'
// import { fetchDataGraph } from './dataGraphService'
// import { type RootState } from '../../app/store'
import { login, logout, profile, register } from './UserService'
// import { history } from '../../utils/history'
// import { Redirect } from 'react-router-dom'
// import { useHistory } from 'react-router'
// import { gradeSlice } from '../gradeFilter/gradeSlice'

export interface UserState {
  username?: string
  email: string
  password: string
}

// eslint-disable-next-line @typescript-eslint/ban-types
const initialState: UserState | {} = {}
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
function checkStatus (status: number): string {
  switch (Math.round(status / 100)) {
    case 1: {
      return 'Information'
    }
    case 2: {
      return 'Success'
    }
    case 3: {
      return 'Redirect'
    }
    case 4: {
      return 'Client Error'
    }
    case 5: {
      return 'Server Error'
    }
    default: {
      return ''
    }
  }
}
export const userRegister = createAsyncThunk(
  'user/register',
  async (userData: UserState) => {
    const response = await register(userData)
    checkStatus(response.status)
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const userLogin = createAsyncThunk(
  'user/login',
  async (userData: UserState) => {
    const response = await login(userData)

    checkStatus(response.status)
    localStorage.setItem('auth', JSON.stringify(userData))
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const userProfile = createAsyncThunk(
  'user/profile',
  async () => {
    return await profile()

    // The value we return becomes the `fulfilled` action payload
  }
)

export const userLogout = createAsyncThunk(
  'user/logout',
  async () => {
    // The value we return becomes the `fulfilled` action payload
    return await logout()
  }
)

export const userSlice = createSlice({
  name: 'user',

  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.push({
      //   name: '',
      //   distance: 0,
      //   professionalism: 0
      // })
    },
    decrement: (state) => {
      // state[0].name += 'test2'
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(userRegister.fulfilled, (state, action) => {
        console.log('extraReducers', action.payload)
        return (action.payload) ? action.payload : state
      })
      .addCase(userProfile.fulfilled, (state, action) => {
        if (action.payload.status !== 200) {
          console.log('OUT LOGIN\n')
          return action.payload.status
        }
      })
      .addCase(userRegister.rejected, (state) => {
        console.log('failed')
      })
  }
})

// export const { userRegister } = gradeSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// export const selectUser = (state: RootState): UserState => state.user

//
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//       (dispatch, getState) => {
//         const currentValue = selectCount(getState())
//         if (currentValue % 2 === 1) {
//           dispatch(incrementByAmount(amount))
//         }
//       }

export default userSlice.reducer
